                       * listing for examples.asm generated on 2019-1-6 at 23:01:43

F800	             1         ORG $F800       we know this code will be loaded into address $F800, and the reset vector points here
F800	             2 
F800	             3 ACC     EQU $00         zeropage addresses used for storing important data
F800	             4 XREG    EQU $01
F800	             5 YREG    EQU $02
F800	             6 STATUS  EQU #03
F800	             7 SPTR    EQU $04
F800	             8 COUTLO  EQU $05         for storing low/high byte of row address
F800	             9 COUTHI  EQU $06
F800	            10 PAGE1Y  EQU $07         keep track of Y position on first page
F800	            11 PAGE2Y  EQU $08         keep track of Y position on second page
F800	            12 
F800	4C 03 F8    13         JMP print       jump to an example
F803	            14 
F803	            15 *       writing to screen demo
F803	            16 *       The contents of memory from a cold start is all 0's,
F803	            17 *       which is displayed as the inverse '@', so that will be displayed until it's overwritten in memory
F803	            18 
F803	            19 ODDROWL EQU $00         low byte of odd-numbered rows (first row is row 1 in this example)
F803	            20 EVNROWL EQU $80
F803	            21 ROW1H   EQU $04         high byte of rows 1 and 2
F803	            22 ROW3H   EQU $05         high byte of rows 3 and 4
F803	            23 PG2H    EQU $08         high byte of screen page 2 (first row)
F803	            24 
F803	A9 A0       25 print   LDA #$A0        start at first normal character
F805	A0 00       26         LDY #$00        index in row to place char
F807	A2 04       27         LDX #ROW1H      put address of row into COUTLO, COUTHI
F809	86 06       28         STX COUTHI
F80B	A2 00       29         LDX #ODDROWL
F80D	86 05       30         STX COUTLO
F80F	20 25 F8    31         JSR outloop
F812	A2 80       32         LDX #EVNROWL    adjust row base address, row 2 is even but page is the same so COUTHI can stay
F814	86 05       33         STX COUTLO
F816	20 25 F8    34         JSR outloop
F819	A2 05       35         LDX #ROW3H      adjust row base address, page also changes this time
F81B	86 06       36         STX COUTHI
F81D	A2 00       37         LDX #ODDROWL
F81F	86 05       38         STX COUTLO
F821	20 25 F8    39         JSR outloop
F824	02          40 done    HCF             halt and catch fire
F825	91 05       41 outloop STA (COUTLO),Y  store character at row base address + Y
F827	C9 DF       42         CMP #$DF
F829	F0 F9       43         BEQ done        done when we reach last character
F82B	69 01       44         ADC #$01
F82D	C8          45         INY
F82E	C0 28       46         CPY #$28
F830	D0 F3       47         BNE outloop
F832	A0 00       48         LDY #$00
F834	18          49         CLC             CPY sets carry if Y >= data ($28 = $28 in this case)
F835	60          50         RTS
F836	            51 
F836	            52 *       print keyboard input onto screen demo
F836	            53 
F836	A0 00       54 kbd     LDY #$00        set up screen output the same way as above example
F838	A2 04       55         LDX #ROW1H
F83A	86 06       56         STX COUTHI
F83C	A2 00       57         LDX #ODDROWL
F83E	86 05       58         STX COUTLO
F840	18          59 undersc CLC
F841	A9 5F       60         LDA #$5F
F843	91 05       61         STA (COUTLO),Y
F845	2C 00 C0    62 scan    BIT $C000       check if highest bit is on (input received flag)
F848	30 03       63         BMI input
F84A	4C 45 F8    64         JMP scan
F84D	AD 00 C0    65 input   LDA $C000       get that input, keep highest bit to display normally
F850	8D 10 C0    66         STA $C010       reference $C010-$C01F to clear input flag on $C000-$C00F
F853	C9 8D       67         CMP #$8D        enter to switch pages
F855	F0 0D       68         BEQ swtchpg
F857	18          69         CLC
F858	91 05       70         STA (COUTLO),Y
F85A	C8          71         INY
F85B	C0 28       72         CPY #$28
F85D	D0 E1       73         BNE undersc
F85F	A0 00       74         LDY #$00        just wrap around same line
F861	4C 40 F8    75         JMP undersc
F864	A6 06       76 swtchpg LDX COUTHI
F866	E0 08       77         CPX #PG2H       if high byte of row is $08, we're currently on second page so we switch to the first
F868	F0 0E       78         BEQ firstpg     otherwise this branch doesn't happen and it continues to switch to second page
F86A	8D 55 C0    79 secndpg STA $C055       switch to second page
F86D	84 07       80         STY PAGE1Y      save Y offset used in first page
F86F	A4 08       81         LDY PAGE2Y      recall the offset used in second page
F871	A2 08       82         LDX #PG2H       switch base address of row to that of the second page
F873	86 06       83         STX COUTHI
F875	4C 40 F8    84         JMP undersc
F878	8D 54 C0    85 firstpg STA $C054       switch to first page
F87B	84 08       86         STY PAGE2Y
F87D	A4 07       87         LDY PAGE1Y
F87F	A2 04       88         LDX #ROW1H
F881	86 06       89         STX COUTHI
F883	4C 40 F8    90         JMP undersc
F886	            91 
F886	            92 *       low resolution graphics demo
F886	            93 
F886	A0 00       94 lores   LDY #$00
F888	A2 04       95         LDX #ROW1H
F88A	86 06       96         STX COUTHI
F88C	A2 00       97         LDX #ODDROWL
F88E	86 05       98         STX COUTLO
F890	A9 00       99         LDA #$00
F892	8D 50 C0   100         STA $C050       switch to graphics mode
F895	8D 56 C0   101         STA $C056       set lo-res
F898	18         102 loloop  CLC
F899	91 05      103         STA (COUTLO),Y
F89B	69 01      104         ADC #$01
F89D	C8         105         INY
F89E	C9 28      106         CMP #$28
F8A0	D0 F6      107         BNE loloop
F8A2	02         108         HCF
F8A3	           109 
F8A3	           110 *       high resolution and mixed graphics demo
F8A3	           111 
F8A3	           112 HIPG1L  EQU $00
F8A3	           113 HIPG1H  EQU $20
F8A3	           114 
F8A3	A0 00      115 hires   LDY #$00
F8A5	A2 20      116         LDX #HIPG1H
F8A7	86 06      117         STX COUTHI
F8A9	A2 00      118         LDX #HIPG1L
F8AB	86 05      119         STX COUTLO
F8AD	8D 50 C0   120         STA $C050       switch to graphics mode (hi res already set from cold start)
F8B0	91 05      121         STA (COUTLO),Y  just placing a few random colors
F8B2	A9 12      122         LDA #%00010010
F8B4	C8         123         INY
F8B5	91 05      124         STA (COUTLO),Y
F8B7	A9 01      125         LDA #%00000001  MSb is palette, then pairs from LSb determine color
F8B9	C8         126         INY
F8BA	91 05      127         STA (COUTLO),Y
F8BC	A9 27      128         LDA #%00100111  palette = 0, %00 = black, %01 = green, %10 = violet, %11 = white
F8BE	C8         129         INY
F8BF	91 05      130         STA (COUTLO),Y
F8C1	A9 09      131         LDA #%00001001  bit 6 is ignored
F8C3	C8         132         INY
F8C4	91 05      133         STA (COUTLO),Y
F8C6	A9 3F      134         LDA #%00111111
F8C8	C8         135         INY
F8C9	91 05      136         STA (COUTLO),Y
F8CB	A9 3B      137         LDA #%00111011  note that LSb is leftmost pixel
F8CD	C8         138         INY
F8CE	91 05      139         STA (COUTLO),Y
F8D0	A9 A5      140         LDA #%10100101  palette = 1, %00 = black, %01 = orange, %10 = blue, %11 = white
F8D2	C8         141         INY
F8D3	91 05      142         STA (COUTLO),Y
F8D5	A9 B6      143         LDA #%10110110
F8D7	C8         144         INY
F8D8	91 05      145         STA (COUTLO),Y
F8DA	A9 8C      146         LDA #%10001100
F8DC	C8         147         INY
F8DD	91 05      148         STA (COUTLO),Y
F8DF	A9 A1      149         LDA #%10100001
F8E1	C8         150         INY
F8E2	91 05      151         STA (COUTLO),Y
F8E4	8D 53 C0   152         STA $C053       enable mixed mode
F8E7	A9 C1      153         LDA #$C1        place an 'A' at the first location for text captions
F8E9	8D 50 06   154         STA $0650
F8EC	02         155         HCF
F8ED	           156 
F8ED	           157 *       using peripheral cards in slot 1 and 4 example (both contain the same card)
F8ED	           158 
F8ED	20 00 C1   159 card    JSR $C100       jump to slot 1's PROM
F8F0	20 00 C4   160         JSR $C400       now slot 4
F8F3	20 00 C1   161         JSR $C100       and slot 1 again
F8F6	02         162         HCF
F8F7	           163 
F8F7	60         164         RTS             dummy subroutine, see testCardPROM.asm (this is where SOMWHER points to)
F8F8	           165 *                       if you change any code above this RTS, then its address will most likely move so
F8F8	           166 *                       then testCardPROM won't jump to it successfully because some other bytes will be at $F8F7
F8F8	           167 *                       I suggest writing new code after this line and changing line 13 to JMP down here if you
F8F8	           168 *                       choose to modify this file

                       * Assembled 248 bytes